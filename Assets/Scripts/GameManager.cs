using System.Collections;
using UnityEngine;
using UnityEngine.SceneManagement;

public class GameManager : MonoBehaviour
{
    public static GameManager Instance { get; private set; }

    public bool isGameOver = false;
    public int score = 0;
    private bool hasRestarted = false; // Emp√™che un double restart

    private void Awake()
    {
        if (Instance == null)
        {
            Instance = this;
            DontDestroyOnLoad(gameObject);
        }
        else
        {
            Destroy(gameObject);
            return;
        }
    }

    public void AddScore(int value)
    {
        score += value;
        Debug.Log("[GameManager] Score actuel : " + score);
    }

    public void StopGame()
    {
        if (isGameOver) return; // Emp√™che plusieurs appels √† StopGame

        isGameOver = true;
        Debug.Log("[GameManager] Fin du jeu - Score final : " + score);

        StartCoroutine(CheckAndSubmitHighscore());
    }

    private IEnumerator CheckAndSubmitHighscore()
    {
        // V√©rifie si les highscores sont d√©j√† charg√©s, sinon les r√©cup√©rer
        if (!Anatidae.HighscoreManager.HasFetchedHighscores)
        {
            Debug.Log("[GameManager] Les highscores ne sont pas charg√©s, r√©cup√©ration en cours...");
            yield return StartCoroutine(Anatidae.HighscoreManager.FetchHighscores());
        }

        // V√©rifie √† nouveau apr√®s la r√©cup√©ration
        if (!Anatidae.HighscoreManager.HasFetchedHighscores)
        {
            Debug.LogError("[GameManager] Impossible de v√©rifier les highscores, la r√©cup√©ration a √©chou√©.");
            yield break;
        }

        if (Anatidae.HighscoreManager.IsHighscore(score))
        {
            Debug.Log("[GameManager] ‚úÖ Nouveau highscore d√©tect√© ! Affichage du formulaire...");
            
            // üîπ R√©initialisation du PlayerName pour obliger la saisie d'un nouveau nom
            Anatidae.HighscoreManager.PlayerName = null;

            // ‚úÖ Remplace l‚Äôacc√®s direct par l‚Äôutilisation de la m√©thode publique
            Anatidae.HighscoreManager.ShowHighscoreInput(score);
        }
        else
        {
            Debug.Log("[GameManager] Score trop bas, pas d'enregistrement.");
        }
    }

    private void Update()
    {
        if (Input.GetButtonDown("P1_Start"))
        {
            Debug.Log("[GameManager] Red√©marrage via touche 'Z' du clavier azerty et w clavier qwerty...");
            RestartGame();
        }
    }

    public void RestartGame()
    {
        if (hasRestarted) return; // Emp√™che plusieurs resets simultan√©s

        Debug.Log("[GameManager] üîÑ Red√©marrage en cours...");
        hasRestarted = true;

        // üî• D√©truire l'instance du GameManager pour √©viter tout conflit
        Destroy(Instance.gameObject);
        Instance = null;

        // Recharge la sc√®ne actuelle
        SceneManager.LoadScene(SceneManager.GetActiveScene().name);

        // üîπ Forcer la r√©initialisation des variables
        isGameOver = false;
        score = 0;

        // üîπ R√©initialisation du nom du joueur pour forcer la saisie d'un nouveau nom
        Anatidae.HighscoreManager.PlayerName = null;
    }

    private void OnDestroy()
    {
        if (Instance == this)
        {
            Instance = null;
        }
    }
}
